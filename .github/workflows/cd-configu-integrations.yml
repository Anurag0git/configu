name: Build Deferred Integrations

on:
  push:
    branches:
      - 446-ability-to-register-integrations-into-configu
      - main

env:
  PACKAGE_NAME: '@configu/deferred-integrations'
  PACKAGE_PATH: 'configu/deferred-integrations'

concurrency:

jobs:
  #  start-release:
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v3
  #
  #      - uses: ./.github/actions/deploy-start-action
  #        id: deployment
  #        with:
  #          package-name: ${{ env.PACKAGE_NAME }}
  #          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build the integrations
        run: pnpm build:integrations

      - uses: actions/upload-artifact@master
        with:
          name: ${{ env.PACKAGE_PATH }}
          path: ${{ env.PACKAGE_PATH }}/dist/latest
  end-release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/download-artifact@master
        with:
          name: ${{ env.PACKAGE_PATH }}
          path: ${{ env.PACKAGE_PATH }}/dist/latest

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v2
        if: ${{startsWith(github.ref, 'refs/tags/') }}
        with:
          draft: true
          name: integrations
          tag_name: latest
          files: |
            ${{ env.PACKAGE_PATH }}/dist/latest/*
            ${{ env.PACKAGE_PATH }}/dist/latest/**/*

#      - uses: ./.github/actions/deploy-end-action
#        if: always()
#        with:
#          package-name: ${{ env.PACKAGE_NAME }}
#          package-version: ${{ steps.deployment.outputs.release-version }}
#          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
